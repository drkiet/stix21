package stix21

import (
	"encoding/json"
	"fmt"
	"time"
)

type Vulnerability struct {
	Type               string              `json:"type" binding:"required"`
	SpecVersion        string              `json:"spec_version" binding:"required"`
	ID                 string              `json:"id" binding:"required"`
	CreatedByRef       string              `json:"created-by-ref,omitempty"`
	Created            time.Time           `json:"created" binding:"required"`
	Modified           time.Time           `json:"modified" binding:"required"`
	Revoked            bool                `json:"revoked,omitempty"`
	Labels             []string            `json:"labels,omitempty"`
	Confidence         int                 `json:"confidence,omitempty"`
	Lang               string              `json:"lang,omitempty"`
	ExternalReferences []ExternalReference `json:"external_references,omitempty"`
	ObjectMarkingRefs  []string            `json:"object_marking_refs,omitempty"`
	GranularMarkings   []GranularMarking   `json:"granular-markings,omitempty"`

	Name string `json:"name" binding:"required"`
	Description string `json:"description,omitempty"`
}


func unmarshalVulnerability(obj json.RawMessage) (vulnerability Vulnerability) {
	json.Unmarshal(obj, &vulnerability)
	return vulnerability
}

func marshalVulnerability(vulnerability Vulnerability) (jsonData string){
	data, e := json.MarshalIndent(vulnerability, "", "  ")
	check(e)
	return string(data)
}

func printVulnerability(vulnerability Vulnerability) {
	fmt.Println("Vulnerability:\n", marshalVulnerability(vulnerability))
}
