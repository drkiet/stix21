package stix21

import (
	"encoding/json"
	"fmt"
	"time"
)

type MalwareAnalysis struct {
	SpecVersion string `json:"spec_version" binding:"required"`
	ID string `json:"id" binding:"required"`
	CreatedByRef string `json:"created-by-ref,omitempty"`
	Created time.Time `json:"created" binding:"required"`
	Modified time.Time `json:"modified" binding:"required"`
	Revoked bool `json:"revoked,omitempty"`
	Labels []string `json:"labels,omitempty"`
	Confidence int `json:"confidence,omitempty"`
	Lang string `json:"lang,omitempty"`
	ExternalReferences []ExternalReference `json:"external_references,omitempty"`
	ObjectMarkingRefs []string `json:"object_marking_refs,omitempty"`
	GranularMarkings [] GranularMarking `json:"granular-markings,omitempty"`

	Product string `json:"product" binding:"required"`
	version string `json:"version,omitempty"`
	HostVmRef string `json:"host_vm_ref,omitempty"`
	OperatingSystemRef string `json:"operating_system_ref,omitempty"`
	InstalledSoftwareRef []string `json:"installed_software_ref,omitempty"`
	ConfigurationVersion string `json:"configuration_version,omitempty"`
	Modules []string `json:"modules,omitempty"`
	AnalysisEngineVersion string `json:"analysis_engine_version,omitempty"`
	Submitted time.Time `json:"submitted,omitempty"`
	AnalysisStarted time.Time `json:"analysis_started,omitempty"`
	AnalysisEnded time.Time `json:"analysis_ended,omitempty"`
	AvResult string `json:"av_result,omitempty"`
	AnalysisScoRef []string `json:"analysis_sco_ref,omitempty"`
}

func printMalwareAnalysis(malwareAnalysis MalwareAnalysis) {
	fmt.Println("MalwareAnalysis:\n", marshalMalwareAnalysis(malwareAnalysis))
}

func marshalMalwareAnalysis(malwareAnalysis MalwareAnalysis) (jsonData string){
	data, e := json.MarshalIndent(malwareAnalysis, "", "  ")
	check(e)
	return string(data)
}

func unmarshalMalwareAnalysis(obj json.RawMessage) (malwareAnalysis MalwareAnalysis) {
	json.Unmarshal(obj, &malwareAnalysis)
	return malwareAnalysis
}

