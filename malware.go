package stix21

import (
	"encoding/json"
	"fmt"
	"time"
)

type Malware struct {
	Type string `json:"type" binding:"required"`
	SpecVersion string `json:"spec_version" binding:"required"`
	ID string `json:"id" binding:"required"`
	CreatedByRef string `json:"created-by-ref,omitempty"`
	Created time.Time `json:"created" binding:"required"`
	Modified time.Time `json:"modified" binding:"required"`
	Revoked bool `json:"revoked,omitempty"`
	Labels []string `json:"labels,omitempty"`
	Confidence int `json:"confidence,omitempty"`
	Lang string `json:"lang,omitempty"`
	ExternalReferences []ExternalReference `json:"external_references,omitempty"`
	ObjectMarkingRefs []string `json:"object_marking_refs,omitempty"`
	GranularMarkings [] GranularMarking `json:"granular-markings,omitempty"`

	Name string `json:"name,omitempty"`
	Description string `json:"description,omitempty"`
	MalwareTypes []OpenVocab `json:"malware_types"`
	IsFamily bool `json:"is_family" binding:"required"`
	Aliases []string `json:"aliases,omitempty"`
	KillChainPhases [] KillChainPhase `json:"kill_chain_phases,omitempty"`
	FirstSeen time.Time `json:"first_seen,omitempty"`
	LastSeen time.Time `json:"last_seen,omitempty"`
	OsExecutionEvs []string `json:"os_execution_envs,omitempty"`
	ArchitectureExecutionEvs []OpenVocab `json:"architecture_execution_envs,omitempty"`
	ImplementationLanguages []OpenVocab `json:"implementation_languages,omitempty"`
	Capabilities []OpenVocab `json:"capabilities,omitempty"`
	SampleRefs []Identifier `json:"sample_refs,omitempty"`

}

func unmarshalMalware(obj json.RawMessage) (malware Malware) {
	json.Unmarshal(obj, &malware)
	return malware
}

func marshalMalware(malware Malware) (jsonData string){
	data, e := json.MarshalIndent(malware, "", "  ")
	check(e)
	return string(data)
}

func printMalware(malware Malware) {
	fmt.Println("Malware:\n", marshalMalware(malware))
}